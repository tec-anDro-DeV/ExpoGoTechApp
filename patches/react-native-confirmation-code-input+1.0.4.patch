diff --git a/node_modules/react-native-confirmation-code-input/components/ConfirmationCodeInput.js b/node_modules/react-native-confirmation-code-input/components/ConfirmationCodeInput.js
index 239c85a..f00032c 100644
--- a/node_modules/react-native-confirmation-code-input/components/ConfirmationCodeInput.js
+++ b/node_modules/react-native-confirmation-code-input/components/ConfirmationCodeInput.js
@@ -1,10 +1,15 @@
-import React, {Component} from 'react';
-import PropTypes from 'prop-types';
-import { View, TextInput, StyleSheet, Dimensions, ViewPropTypes } from 'react-native';
-import _ from 'lodash';
+import React, { Component } from "react";
+import PropTypes from "prop-types";
+import { View, TextInput, StyleSheet, Dimensions } from "react-native";
+import {
+  ViewPropTypes,
+  TextInputPropTypes,
+} from "deprecated-react-native-prop-types";
+import _ from "lodash";
 
 // if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)
 const viewPropTypes = ViewPropTypes || View.propTypes;
+const textInputPropTypes = TextInputPropTypes || TextInput.propTypes;
 
 export default class ConfirmationCodeInput extends Component {
   static propTypes = {
@@ -19,31 +24,32 @@ export default class ConfirmationCodeInput extends Component {
     inactiveColor: PropTypes.string,
     ignoreCase: PropTypes.bool,
     autoFocus: PropTypes.bool,
-    codeInputStyle: TextInput.propTypes.style,
+    codeInputStyle: textInputPropTypes.style,
     containerStyle: viewPropTypes.style,
     onFulfill: PropTypes.func,
+    onCodeChange: PropTypes.func,
   };
 
   static defaultProps = {
     codeLength: 5,
-    inputPosition: 'center',
+    inputPosition: "center",
     autoFocus: true,
     size: 40,
-    className: 'border-box',
+    className: "border-box",
     cellBorderWidth: 1,
-    activeColor: 'rgba(255, 255, 255, 1)',
-    inactiveColor: 'rgba(255, 255, 255, 0.2)',
+    activeColor: "rgba(255, 255, 255, 1)",
+    inactiveColor: "rgba(255, 255, 255, 0.2)",
     space: 8,
-    compareWithCode: '',
-    ignoreCase: false
+    compareWithCode: "",
+    ignoreCase: false,
   };
 
   constructor(props) {
     super(props);
 
     this.state = {
-      codeArr: new Array(this.props.codeLength).fill(''),
-      currentIndex: 0
+      codeArr: new Array(this.props.codeLength).fill(""),
+      currentIndex: 0,
     };
 
     this.codeInputRefs = [];
@@ -52,18 +58,24 @@ export default class ConfirmationCodeInput extends Component {
   componentDidMount() {
     const { compareWithCode, codeLength, inputPosition } = this.props;
     if (compareWithCode && compareWithCode.length !== codeLength) {
-      console.error("Invalid props: compareWith length is not equal to codeLength");
+      console.error(
+        "Invalid props: compareWith length is not equal to codeLength"
+      );
     }
 
-    if (_.indexOf(['center', 'left', 'right', 'full-width'], inputPosition) === -1) {
-      console.error('Invalid input position. Must be in: center, left, right, full');
+    if (
+      _.indexOf(["center", "left", "right", "full-width"], inputPosition) === -1
+    ) {
+      console.error(
+        "Invalid input position. Must be in: center, left, right, full"
+      );
     }
   }
 
   clear() {
     this.setState({
-      codeArr: new Array(this.props.codeLength).fill(''),
-      currentIndex: 0
+      codeArr: new Array(this.props.codeLength).fill(""),
+      currentIndex: 0,
     });
     this._setFocus(0);
   }
@@ -78,20 +90,20 @@ export default class ConfirmationCodeInput extends Component {
 
   _onFocus(index) {
     let newCodeArr = _.clone(this.state.codeArr);
-    const currentEmptyIndex = _.findIndex(newCodeArr, c => !c);
+    const currentEmptyIndex = _.findIndex(newCodeArr, (c) => !c);
     if (currentEmptyIndex !== -1 && currentEmptyIndex < index) {
       return this._setFocus(currentEmptyIndex);
     }
     for (const i in newCodeArr) {
       if (i >= index) {
-        newCodeArr[i] = '';
+        newCodeArr[i] = "";
       }
     }
 
     this.setState({
       codeArr: newCodeArr,
-      currentIndex: index
-    })
+      currentIndex: index,
+    });
   }
 
   _isMatchingCode(code, compareWithCode, ignoreCase = false) {
@@ -103,49 +115,49 @@ export default class ConfirmationCodeInput extends Component {
 
   _getContainerStyle(size, position) {
     switch (position) {
-      case 'left':
+      case "left":
         return {
-          justifyContent: 'flex-start',
-          height: size
+          justifyContent: "flex-start",
+          height: size,
         };
-      case 'center':
+      case "center":
         return {
-          justifyContent: 'center',
-          height: size
+          justifyContent: "center",
+          height: size,
         };
-      case 'right':
+      case "right":
         return {
-          justifyContent: 'flex-end',
-          height: size
+          justifyContent: "flex-end",
+          height: size,
         };
       default:
         return {
-          justifyContent: 'space-between',
-          height: size
-        }
+          justifyContent: "space-between",
+          height: size,
+        };
     }
   }
 
   _getInputSpaceStyle(space) {
     const { inputPosition } = this.props;
     switch (inputPosition) {
-      case 'left':
+      case "left":
         return {
-          marginRight: space
+          marginRight: space,
         };
-      case 'center':
+      case "center":
         return {
-          marginRight: space/2,
-          marginLeft: space/2
+          marginRight: space / 2,
+          marginLeft: space / 2,
         };
-      case 'right':
+      case "right":
         return {
-          marginLeft: space
+          marginLeft: space,
         };
       default:
         return {
           marginRight: 0,
-          marginLeft: 0
+          marginLeft: 0,
         };
     }
   }
@@ -154,39 +166,39 @@ export default class ConfirmationCodeInput extends Component {
     const { cellBorderWidth, activeColor, inactiveColor, space } = this.props;
     let classStyle = {
       ...this._getInputSpaceStyle(space),
-      color: activeColor
+      color: activeColor,
     };
 
     switch (className) {
-      case 'clear':
+      case "clear":
         return _.merge(classStyle, { borderWidth: 0 });
-      case 'border-box':
+      case "border-box":
         return _.merge(classStyle, {
           borderWidth: cellBorderWidth,
-          borderColor: (active ? activeColor : inactiveColor)
+          borderColor: active ? activeColor : inactiveColor,
         });
-      case 'border-circle':
+      case "border-circle":
         return _.merge(classStyle, {
           borderWidth: cellBorderWidth,
           borderRadius: 50,
-          borderColor: (active ? activeColor : inactiveColor)
+          borderColor: active ? activeColor : inactiveColor,
         });
-      case 'border-b':
+      case "border-b":
         return _.merge(classStyle, {
           borderBottomWidth: cellBorderWidth,
-          borderColor: (active ? activeColor : inactiveColor),
+          borderColor: active ? activeColor : inactiveColor,
         });
-      case 'border-b-t':
+      case "border-b-t":
         return _.merge(classStyle, {
           borderTopWidth: cellBorderWidth,
           borderBottomWidth: cellBorderWidth,
-          borderColor: (active ? activeColor : inactiveColor)
+          borderColor: active ? activeColor : inactiveColor,
         });
-      case 'border-l-r':
+      case "border-l-r":
         return _.merge(classStyle, {
           borderLeftWidth: cellBorderWidth,
           borderRightWidth: cellBorderWidth,
-          borderColor: (active ? activeColor : inactiveColor)
+          borderColor: active ? activeColor : inactiveColor,
         });
       default:
         return className;
@@ -194,23 +206,35 @@ export default class ConfirmationCodeInput extends Component {
   }
 
   _onKeyPress(e) {
-    if (e.nativeEvent.key === 'Backspace') {
+    if (e.nativeEvent.key === "Backspace") {
       const { currentIndex } = this.state;
+      let newCodeArr = _.clone(this.state.codeArr);
       const nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;
+      for (const i in newCodeArr) {
+        if (i >= nextIndex) {
+          newCodeArr[i] = "";
+        }
+      }
+      this.props.onCodeChange(newCodeArr.join(""));
       this._setFocus(nextIndex);
     }
   }
 
   _onInputCode(character, index) {
-    const { codeLength, onFulfill, compareWithCode, ignoreCase } = this.props;
+    const { codeLength, onFulfill, compareWithCode, ignoreCase, onCodeChange } =
+      this.props;
     let newCodeArr = _.clone(this.state.codeArr);
     newCodeArr[index] = character;
 
     if (index == codeLength - 1) {
-      const code = newCodeArr.join('');
+      const code = newCodeArr.join("");
 
       if (compareWithCode) {
-        const isMatching = this._isMatchingCode(code, compareWithCode, ignoreCase);
+        const isMatching = this._isMatchingCode(
+          code,
+          compareWithCode,
+          ignoreCase
+        );
         onFulfill(isMatching, code);
         !isMatching && this.clear();
       } else {
@@ -221,12 +245,17 @@ export default class ConfirmationCodeInput extends Component {
       this._setFocus(this.state.currentIndex + 1);
     }
 
-    this.setState(prevState => {
-      return {
-        codeArr: newCodeArr,
-        currentIndex: prevState.currentIndex + 1
-      };
-    });
+    this.setState(
+      (prevState) => {
+        return {
+          codeArr: newCodeArr,
+          currentIndex: prevState.currentIndex + 1,
+        };
+      },
+      () => {
+        onCodeChange(newCodeArr.join(""));
+      }
+    );
   }
 
   render() {
@@ -238,12 +267,12 @@ export default class ConfirmationCodeInput extends Component {
       autoFocus,
       className,
       size,
-      activeColor
+      activeColor,
     } = this.props;
 
     const initialCodeInputStyle = {
       width: size,
-      height: size
+      height: size,
     };
 
     let codeInputs = [];
@@ -252,30 +281,38 @@ export default class ConfirmationCodeInput extends Component {
       codeInputs.push(
         <TextInput
           key={id}
-          ref={ref => (this.codeInputRefs[id] = ref)}
+          ref={(ref) => (this.codeInputRefs[id] = ref)}
           style={[
             styles.codeInput,
             initialCodeInputStyle,
             this._getClassStyle(className, this.state.currentIndex == id),
-            codeInputStyle
+            codeInputStyle,
           ]}
           underlineColorAndroid="transparent"
           selectionColor={activeColor}
-          keyboardType={'name-phone-pad'}
-          returnKeyType={'done'}
+          keyboardType={"name-phone-pad"}
+          returnKeyType={"done"}
           {...this.props}
           autoFocus={autoFocus && id == 0}
           onFocus={() => this._onFocus(id)}
-          value={this.state.codeArr[id] ? this.state.codeArr[id].toString() : ''}
-          onChangeText={text => this._onInputCode(text, id)}
+          value={
+            this.state.codeArr[id] ? this.state.codeArr[id].toString() : ""
+          }
+          onChangeText={(text) => this._onInputCode(text, id)}
           onKeyPress={(e) => this._onKeyPress(e)}
           maxLength={1}
         />
-      )
+      );
     }
 
     return (
-      <View style={[styles.container, this._getContainerStyle(size, inputPosition), containerStyle]}>
+      <View
+        style={[
+          styles.container,
+          this._getContainerStyle(size, inputPosition),
+          containerStyle,
+        ]}
+      >
         {codeInputs}
       </View>
     );
@@ -285,12 +322,12 @@ export default class ConfirmationCodeInput extends Component {
 const styles = StyleSheet.create({
   container: {
     flex: 1,
-    flexDirection: 'row',
-    marginTop: 20
+    flexDirection: "row",
+    marginTop: 20,
   },
   codeInput: {
-    backgroundColor: 'transparent',
-    textAlign: 'center',
-    padding: 0
-  }
+    backgroundColor: "transparent",
+    textAlign: "center",
+    padding: 0,
+  },
 });
\ No newline at end of file
